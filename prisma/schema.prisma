// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  emailVerified DateTime?
  password  String?
  image     String?
  role      Role     @default(STUDENT)
  reviews   Review[]
  projects  Project[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Project {
  id          String    @id @default(cuid())
  name       String
  title       String
  description String
  githubUrl   String
  tags        String[]
  reportUrl   String?
  visibility  Visibility
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  reviews     Review[]
  createdAt   DateTime  @default(now())
}

model Review {
  id            String   @id @default(cuid())
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  technical     Int
  innovation    Int
  documentation Int
  design        Int
  feedback      String?
  createdAt     DateTime @default(now())
}

enum Visibility {
  PUBLIC
  PRIVATE
  GROUP_ONLY
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}
